{"version":3,"sources":["~lib/rt/common.ts","~lib/shared/typeinfo.ts","assembly/index.ts"],"names":[],"mappings":"4GEKE,KAQG,AAFU,GAAG,UAAQ,GAAG,WAAQ,GAAG,WAEzB,AADA,GAAG,UAAQ,GAAG,WAAQ,GAAG,cAE7B,YASM,EAAK,KAEN,EAAM,KAGL,QACR,EAAE,GADS,EAAE,EAAW,OAKxB,AAAS,AAAS,EAAE,QAAI,AAAS,EAAI,MAAI,AAAS,EAAI,MAAI,AAAS,EAAI,MAAG,AAAS,EAAI,MAAI,AAAS,EAAI,UACjG,AAAS,EAAE,KAAE,QACb,AAAS,EAAI,QACb,AAAS,EAAI,QACb,AAAS,EAAI,QACX,EAAI,KAAI,GAAG,AAAS,QACpB,EAAQ,GAAG,AAAS,EAAI,SACxB,EAAQ,GAAG,AAAS,EAAI,SACxB,EAAQ,GAAG,AAAS,EAAI,SACxB,EAAW,KACX,EAAQ,GAAG,KACX,EAAQ,GAAG,KACX,EAAQ,GAAG,MAjBO","sourceRoot":"assemblyscript:///","sourceContents":["// Alignment guarantees\n\n// @ts-ignore: decorator\n@inline export const AL_BITS: u32 = 4; // 16 bytes to fit up to v128\n// @ts-ignore: decorator\n@inline export const AL_SIZE: usize = 1 << <usize>AL_BITS;\n// @ts-ignore: decorator\n@inline export const AL_MASK: usize = AL_SIZE - 1;\n\n// Extra debugging\n\n// @ts-ignore: decorator\n@inline export const DEBUG = true;\n\n// ╒════════════════ Common block layout (32-bit) ═════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                           MM info                             │ -16\n// ├───────────────────────────────────────────────────────────────┤\n// │                           GC info                             │ -12\n// ├───────────────────────────────────────────────────────────────┤\n// │                          runtime id                           │ -8\n// ├───────────────────────────────────────────────────────────────┤\n// │                         runtime size                          │ -4\n// ╞═══════════════════════════════════════════════════════════════╡\n// │                              ...                              │ ref\n@unmanaged export class BLOCK {\n  /** Memory manager info. */\n  mmInfo: usize; // WASM64 needs adaption\n  /** Garbage collector info. */\n  gcInfo: u32;\n  /** Runtime class id. */\n  rtId: u32;\n  /** Runtime object size. */\n  rtSize: u32;\n}\n\n// @ts-ignore: decorator\n@inline export const BLOCK_OVERHEAD = (offsetof<BLOCK>() + AL_MASK) & ~AL_MASK;\n\n// @ts-ignore: decorator\n@inline export const BLOCK_MAXSIZE: usize = (1 << 30) - BLOCK_OVERHEAD;\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","\n\nvar num = 0;\n\nexport function test():i32 {\n  return 0\n}\n\n\n//对比颜色\nexport function contrast(r1:i32, g1:i32, b1:i32,r2:i32, g2:i32, b2:i32):i32{\n  let color1 = r1*0.299 + g1*0.578 + b1*0.114;\n  let color2 = r2*0.299 + g2*0.578 + b2*0.114\n  if(color1 <= color2) {\n    return 1;\n  }\n  return 0;\n}\n \n\n\n//排序颜色\nexport function sortColors (byte:i32, index:i32, offset:i32):i32 {\n  let byteSize = byte/4;\n  let start:i32 = index>offset ? index-offset : 0;\n  let end:i32 = index+offset;\n\n  // for(let i = 0; i< end - 1; i++) {\n    for (let j = 0; j<byteSize - 1; j++) {\n      if(j>end){\n        break;\n      }\n      let pos = j;\n      if(contrast(load<u8>(j*4), load<u8>(j*4+1), load<u8>(j*4+2), load<u8>(j*4+4),load<u8>(j*4+5), load<u8>(j*4+6))) {\n        let r = load<u8>(j*4+4);\n        let g = load<u8>(j*4+5);\n        let b = load<u8>(j*4+6);\n        let a = load<u8>(j*4+7);\n        store<u8>(pos*4 + 4, load<u8>(j*4));\n        store<u8>(pos*4 + 5, load<u8>(j*4+1));\n        store<u8>(pos*4 + 6, load<u8>(j*4+2));\n        store<u8>(pos*4 + 7, load<u8>(j*4+3));\n        store<u8>(pos*4 + 0, r);\n        store<u8>(pos*4 + 1, g);\n        store<u8>(pos*4 + 2, b);\n        store<u8>(pos*4 + 3, a);\n      }\n    }\n  // }\n  return 0;\n}"]}